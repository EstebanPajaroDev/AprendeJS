// ==========================
// üöÄ Ejercicios de JavaScript üöÄ
// ==========================
//
// Este archivo contiene una serie de ejercicios de JavaScript organizados en niveles:
// B√°sico, Normal, Medio y Avanzado. Cada secci√≥n est√° dividida por comentarios, y cada
// ejercicio tiene una breve descripci√≥n de lo que se debe realizar.
//
// ¬°Empieza a practicar y mejora tus habilidades de JavaScript!
//
// ==========================

// ==========================
// üü† NIVEL INTERMEDIO (25 Ejercicios)
// ==========================

// 1. Crea una funci√≥n que calcule la potencia de un n√∫mero: La funci√≥n debe recibir una base y un exponente. ‚≠ê1

// 2. Genera una lista de n√∫meros primos hasta un n√∫mero dado: Escribe una funci√≥n que devuelva los n√∫meros primos hasta un l√≠mite. ‚≠ê2

// 3. Crea una funci√≥n que convierta una cadena a "lenguaje hacker" (leet): Sustituye ciertas letras en una cadena con n√∫meros o s√≠mbolos. ‚≠ê3

// 4. Implementa una b√∫squeda binaria: Escribe una funci√≥n que busque un n√∫mero en un array ordenado. ‚≠ê4

// 5. Genera la serie de Fibonacci hasta el en√©simo n√∫mero: Calcula la secuencia de Fibonacci hasta una posici√≥n dada. ‚≠ê5

// 6. Crea una funci√≥n que invierta las palabras de una oraci√≥n: La funci√≥n debe devolver las palabras en orden inverso. ‚≠ê6

// 7. Cifra una cadena usando el cifrado C√©sar: Escribe una funci√≥n que desplace las letras de una cadena un n√∫mero fijo de posiciones. ‚≠ê7

// 8. Encuentra el n√∫mero de ocurrencias de cada letra en una cadena: Crea una funci√≥n que cuente la frecuencia de cada letra. ‚≠ê8

// 9. Calcula el promedio, moda y mediana de un array: La funci√≥n debe calcular estas tres estad√≠sticas b√°sicas de un array. ‚≠ê9

// 10. Valida si una fecha tiene formato "DD/MM/AAAA": Escribe una funci√≥n que verifique si una cadena sigue este formato de fecha. ‚≠ê10

// 11. Simula una peque√±a calculadora (+, -, *, /): Crea una funci√≥n que reciba dos n√∫meros y un operador y realice la operaci√≥n. ‚≠ê11

// 12. Ordena un array de objetos por una propiedad espec√≠fica: Usa sort para ordenar un array de objetos seg√∫n una propiedad. ‚≠ê12

// 13. Encuentra los n√∫meros que se repiten en un array: Escribe una funci√≥n que devuelva los n√∫meros duplicados. ‚≠ê13

// 14. Encuentra todos los n√∫meros que faltan en una secuencia: Encuentra los n√∫meros faltantes en una lista de n√∫meros consecutivos. ‚≠ê14

// 15. Implementa la funci√≥n debounce: Escribe una funci√≥n para limitar la frecuencia de ejecuci√≥n de otra funci√≥n. ‚≠ê15

// 16. Crea un cron√≥metro simple con setInterval: Usa setInterval para crear un cron√≥metro que cuente el tiempo transcurrido. ‚≠ê16

// 17. Convierte un n√∫mero decimal a binario y viceversa: Escribe dos funciones para hacer estas conversiones. ‚≠ê17

// 18. Implementa una cola con funciones de enqueue y dequeue: Crea una estructura de datos que permita agregar y remover elementos de una cola. ‚≠ê18

// 19. Implementa una pila con funciones push y pop: Crea una estructura de datos que permita agregar y remover elementos de una pila. ‚≠ê19

// 20. Crea una funci√≥n que verifique si dos cadenas son anagramas: Escribe una funci√≥n que determine si dos cadenas contienen las mismas letras. ‚≠ê20

// 21. Crea una funci√≥n que convierta un n√∫mero romano a un n√∫mero entero: Escribe una funci√≥n que reciba un n√∫mero en formato romano (por ejemplo, "XIV") y lo convierta a un n√∫mero entero. ‚≠ê21

// 22. Encuentra el √≠ndice de un valor en una matriz bidimensional: Escribe una funci√≥n que devuelva el √≠ndice de un valor dentro de una matriz 2D. ‚≠ê22

// 23. Genera una matriz con valores aleatorios: Escribe una funci√≥n que devuelva una matriz de tama√±o espec√≠fico con n√∫meros aleatorios. ‚≠ê23

// 24. Implementa un sistema de autenticaci√≥n b√°sico usando objetos: Crea una funci√≥n que valide usuarios a partir de un objeto con credenciales. ‚≠ê24

// 25. Crea una funci√≥n que elimine los elementos duplicados de un array: Usa un Set o un bucle para eliminar duplicados en un array. ‚≠ê25

// ==========================
// üéâ FIN DE LOS EJERCICIOS üéâ
// ==========================
//
// Puedes a√±adir m√°s ejercicios siguiendo esta estructura. Cada ejercicio tiene un breve
// comentario que describe su prop√≥sito. Para ejecutar este archivo, usa Node.js o c√≥pialo
// a la consola del navegador si trabajas en ejercicios DOM.
